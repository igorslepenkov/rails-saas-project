document.addEventListener("turbo:load", () => {
  const paymentForm = document.getElementById("payment-form");

  if (paymentForm) {
    const stripe = Stripe("<%= ENV['STRIPE_PUBLISHABLE_KEY'] %>");

    const urlSearchParams = new URLSearchParams(window.location.search);
    const params = Object.fromEntries(urlSearchParams.entries());

    const emailField = document.getElementById("organization_email");
    const passwordField = document.getElementById("organization_password");
    const passwordConfirmField = document.getElementById(
      "organization_password_confirmation"
    );
    const nameField = document.getElementById('organization_name');
    const subdomainField = document.getElementById('organization_subdomain');
    const paymentField = document.getElementById("payment-input");
    const planSelector = document.getElementById("organization_plan");

    let elements;

    async function initialize() {
      const response = await fetch("/payments/create-intent", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ plan: planSelector.value }),
      });
      const { clientSecret } = await response.json();

      const appearance = {
        theme: 'night',
        labels: 'floating'
      };
      
      elements = stripe.elements({ appearance, clientSecret });

      const paymentElement = elements.create("payment");
      paymentElement.mount("#payment-element");
    }

    planSelector.addEventListener("change", () => {
      if(planSelector.value !== 'free'){
        initialize();
      } else {
        document.getElementById('payment-element').textContent = '';
      }
    });

    if (params.plan) {
      planSelector.value = params.plan;
      planSelector.dispatchEvent(new Event("change"));
    }

    if (params.email && params.password && params.name && params.subdomain && params.plan && params.payment_intent) {
      emailField.value = params.email;
      passwordField.value = params.password;
      passwordConfirmField.value = params.password_confirmation;
      paymentField.value = JSON.stringify({
        payment_intent: params.payment_intent,
      });
      nameField.value = params.name;
      subdomainField.value = params.subdomain;
      paymentForm.submit.click();
    } else {
      checkStatus();

      paymentForm.addEventListener("turbo:submit-start", handleSubmit);

      // Fetches a payment intent and captures the client secret

      async function handleSubmit(e) {
        e.detail.formSubmission.stop();
        paymentForm.removeEventListener("turbo:submit-start", handleSubmit);

        const email = emailField.value;
        const password = passwordField.value;
        const passwordConfirm = passwordConfirmField.value;
        const name = nameField.value;
        const subdomain = subdomainField.value;
        const returnUrl = `${location.href}?email=${email}&password=${password}&password_confirmation=${passwordConfirm}&name=${name}&subdomain=${subdomain}`;
        const { error } = await stripe.confirmPayment({
          elements,
          confirmParams: {
            // Make sure to change this to your payment completion page
            return_url: returnUrl,
          },
        });

        // This point will only be reached if there is an immediate error when
        // confirming the payment. Otherwise, your customer will be redirected to
        // your `return_url`. For some payment methods like iDEAL, your customer will
        // be redirected to an intermediate site first to authorize the payment, then
        // redirected to the `return_url`.
        if (error.type === "card_error" || error.type === "validation_error") {
          showMessage(error.message);
        } else {
          showMessage("An unexpected error occurred.");
        }
      }
      // Fetches the payment intent status after payment submission
      async function checkStatus() {
        const clientSecret = new URLSearchParams(window.location.search).get(
          "payment_intent_client_secret"
        );

        if (!clientSecret) {
          return;
        }

        const { paymentIntent } = await stripe.retrievePaymentIntent(
          clientSecret
        );

        switch (paymentIntent.status) {
          case "succeeded":
            showMessage("Payment succeeded!");
            break;
          case "processing":
            showMessage("Your payment is processing.");
            break;
          case "requires_payment_method":
            showMessage("Your payment was not successful, please try again.");
            break;
          default:
            showMessage("Something went wrong.");
            break;
        }
      }

      // ------- UI helpers -------

      function showMessage(messageText) {
        const messageContainer = document.querySelector("#payment-message");

        messageContainer.classList.remove("hidden");
        messageContainer.textContent = messageText;

        setTimeout(function () {
          messageContainer.classList.add("hidden");
          messageText.textContent = "";
        }, 4000);
      }
    }
  }
});
