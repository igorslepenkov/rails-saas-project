import { StripeService } from "./StripeService";

export const PaymentForm = (element) => {
  this.form = element;

  this.stripeService = null;
  this.stripe = null;
  this.emailField = null;
  this.passwordField = null;
  this.passwordConfirmField = null;
  this.nameField = null;
  this.subdomainField = null;
  this.paymentField = null;
  this.planSelector = null;
  this.messageContainer = null;
  this.cardElement = null;

  this.create = () => {
    this.form = document.getElementById("payment-form");
    this.emailField = document.getElementById("organization_email");
    this.passwordField = document.getElementById("organization_password");
    this.passwordConfirmField = document.getElementById(
      "organization_password_confirmation"
    );
    this.nameField = document.getElementById("organization_name");
    this.subdomainField = document.getElementById("organization_subdomain");
    this.paymentField = document.getElementById("payment-input");
    this.planSelector = document.getElementById("organization_plan");
    this.messageContainer = document.querySelector("#payment-message");
    this.cardElement = document.getElementById("#payment-element");
  };

  this.initialize = (publishableKey) => {
    const service = StripeService.new(publishableKey, this.form);
    this.stripe = service.stripe;
    this.stripeService = service;
    this.addSubmitHandler();
  };

  this.showMessage = (messageText) => {
    this.messageContainer.classList.remove("hidden");
    this.messageContainer.textContent = messageText;

    setTimeout(function () {
      messageContainer.classList.add("hidden");
      messageText.textContent = "";
    }, 4000);
  };

  this.checkIfPaymentSuccessfull = async () => {
    const clientSecret = new URLSearchParams(window.location.search).get(
      "payment_intent_client_secret"
    );

    if (!clientSecret) {
      return false;
    }

    const { paymentIntent } = await this.stripe.retrievePaymentIntent(
      clientSecret
    );

    return paymentIntent.status === "succeeded";
  };

  this.handleSubmit = async () => {
    const paymentStatus = checkIfPaymentSuccessfull();

    if (paymentStatus) {
      this.emailField.value = params.email;
      this.passwordField.value = params.password;
      this.passwordConfirmField.value = params.password_confirmation;
      this.paymentField.value = JSON.stringify({
        payment_intent: params.payment_intent,
      });
      this.nameField.value = params.name;
      this.subdomainField.value = params.subdomain;
      this.removeSubmitHandler();
      this.form.submit();
    } else {
      const email = this.emailField.value;
      const password = this.passwordField.value;
      const passwordConfirm = this.passwordConfirmField.value;
      const name = this.nameField.value;
      const subdomain = this.subdomainField.value;
      const returnUrl = `${location.href}?email=${email}&password=${password}&password_confirmation=${passwordConfirm}&name=${name}&subdomain=${subdomain}`;
      const { error } = await this.stripe.confirmPayment({
        elements: this.stripeService.elements,
        confirmParams: {
          // Make sure to change this to your payment completion page
          return_url: returnUrl,
        },
      });
      if (error.type === "card_error" || error.type === "validation_error") {
        this.showMessage(error.message);
      } else {
        this.showMessage("An unexpected error occurred.");
      }
    }
  };

  this.addSubmitHandler = () => {
    this.form.addEventListener("turbo:submit-start", this.handleSubmit);
  };

  this.hydrate = (publishableKey) => {
    this.planSelector.addEventListener("change", () => {
      if (planSelector.value !== "free") {
        this.initialize(publishableKey);
      } else {
        this.cardElement.textContent = "";
      }
    });
  };

  this.removeSubmitHandler = () => {
    this.form.removeEventListener("turbo:submit-start", this.handleSubmit);
  };

  this.initForm = (publishableKey) => {
    this.create();
    this.hydrate(publishableKey);
  };
};
